#+TITLE: Emacs Configurations
#+AUTHOR: Madhavan Raja

* Table of Contents :toc:
- [[#introduction][Introduction]]
- [[#packages][Packages]]
- [[#window][Window]]
- [[#behaviour][Behaviour]]
  - [[#basic-settings][Basic settings]]
  - [[#backup-files][Backup files]]
  - [[#notifications][Notifications]]
  - [[#esc-cancels-the-current-command][ESC cancels the current command.]]
  - [[#good-scroll][Good scroll]]
  - [[#custom-file][Custom File]]
- [[#theme][Theme]]
- [[#basic-visual-adjustments][Basic Visual Adjustments]]
  - [[#disable-the-scroll-bar-menu-bar-tool-bar-tooltips-and-the-start-screens][Disable the scroll bar, menu bar, tool bar, tooltips, and the start screens.]]
  - [[#prettify-things][Prettify Things]]
  - [[#line-numbers][Line numbers]]
  - [[#miscellaneous-minor-modes][Miscellaneous Minor Modes]]
- [[#fonts][Fonts]]
- [[#indentations][Indentations]]
- [[#all-the-icons][All The Icons]]
  - [[#prerequisites][Prerequisites]]
  - [[#package-installation][Package installation]]
- [[#evil-mode][Evil Mode]]
  - [[#base][Base]]
  - [[#collection][Collection]]
  - [[#evil-org][Evil Org]]
  - [[#leader][Leader]]
  - [[#additional-keybindings][Additional keybindings]]
  - [[#miscellaneous-settings][Miscellaneous settings]]
- [[#additional-packages][Additional Packages]]
  - [[#which-key][Which Key]]
  - [[#m-x-completion][M-x completion]]
  - [[#tabs][Tabs]]
  - [[#neotree][Neotree]]
  - [[#magit][Magit]]
  - [[#parentheses][Parentheses]]
  - [[#mode-line][Mode line]]
  - [[#undo-tree][Undo-Tree]]
  - [[#formatter][Formatter]]
  - [[#lsp][LSP]]
  - [[#company][Company]]
  - [[#flycheck][Flycheck]]
  - [[#projectile][Projectile]]
  - [[#dictionary][Dictionary]]
  - [[#thesaurus][Thesaurus]]
- [[#org-mode][Org Mode]]
  - [[#org-download][Org-download]]
  - [[#org-indent][Org-indent]]
  - [[#pretty-entities][Pretty entities]]
  - [[#org-bullets][Org bullets]]
  - [[#org-ellipses][Org Ellipses]]
  - [[#org-toc][Org TOC]]
  - [[#org-agenda][Org Agenda]]
  - [[#keywords][Keywords]]
  - [[#org-roam][Org Roam]]
- [[#functions][Functions]]
  - [[#compilation][Compilation]]

* Introduction
An Emacs configuration for note taking, documenting and (potentially) development. Clone using:

#+begin_src bash :tangle no
  git clone https://github.com/madhavan-raja/emacs-config.git ~/.emacs.d
#+end_src

Open =README.org= in Emacs and run:

#+BEGIN_SRC emacs-lisp :tangle no
  (org-babel-tangle)
#+end_src

Lastly, restart Emacs.

* Packages
We set up melpa, use-package, and straight.el for installing package later on. Melpa has a lot more packages than the default elpa. Use-package is pretty /useful/ (pun intended) since packages can be automatically installed and lazy-loaded. Straight.el is for downloading packages from git repos. We also install the package =auto-package-update= to update installed packages.

#+BEGIN_SRC emacs-lisp :tangle init.el
  (require 'package)

  (setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
                           ("melpa" . "http://melpa.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (require 'use-package)

  (setq use-package-always-ensure t)
  (setq package-enable-at-startup nil)

  (use-package auto-package-update
     :ensure t
     :config
     (setq auto-package-update-delete-old-versions t
           auto-package-update-interval 4)
     (auto-package-update-maybe))
#+end_src
* Window
Set window title, start the application maximized and disable the startup screen.

#+BEGIN_SRC emacs-lisp :tangle init.el
  (setq frame-title-format "%b - Emacs")
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
  (setq ring-bell-function 'ignore)
#+end_src

* Behaviour
** Basic settings
#+BEGIN_SRC emacs-lisp :tangle init.el
  (setq-default
    delete-by-moving-to-trash t ;; Move to trash instead of deleting
    require-final-newline t ;; Auto create a newline at end of file
    custom-safe-themes t ;; Don't ask if theme is safe
    warning-minimum-level :emergency ;; Emacs, honestly, I want you to shut up
    disabled-command-function nil ;; Yes I want to use that command
    vc-follow-symlinks) ;; Follow those damn symlinks!

  (defalias 'yes-or-no-p 'y-or-n-p) ;; Y or N instead of yes or no

  (setq scroll-margin 1
    scroll-step 1
    scroll-conservatively 10000
    smooth-scroll-margin 1)
#+END_SRC

** Backup files
Disable the generation of backup files:

#+BEGIN_SRC emacs-lisp :tangle init.el
  (setq make-backup-files nil)
#+end_src

** Notifications
Disable the notifications:

#+BEGIN_SRC emacs-lisp :tangle init.el
  (setq ring-bell-function 'ignore)
#+end_src

** ESC cancels the current command.
Map the escape key to cancel the current command. Useful with =evil-mode=:

#+BEGIN_SRC emacs-lisp :tangle init.el
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src

** Good scroll
A smoother pixel-based scrolling:

#+BEGIN_SRC emacs-lisp :tangle init.el
  (use-package emacs
    :custom
    (redisplay-dont-pause            t) ;; Fully redraw the display before it processes queued input events.
    (next-screen-context-lines       2) ;; Number of lines of continuity to retain when scrolling by full screens
    (scroll-conservatively       10000) ;; only 'jump' when moving this far off the screen
    (scroll-step                     1) ;; Keyboard scroll one line at a time
    (mouse-wheel-progressive-speed nil) ;; Don't accelerate scrolling
    (mouse-wheel-follow-mouse        t) ;; Scroll window under mouse
    (fast-but-imprecise-scrolling    t) ;; No (less) lag while scrolling lots.
    (auto-window-vscroll           nil)) ;; Cursor move faster

  (use-package good-scroll
    :hook (after-init . good-scroll-mode))
#+end_src

** Custom File
Set the location of the custom files to =.custom= directory:

#+BEGIN_SRC emacs-lisp :tangle init.el
  (setq custom-file (expand-file-name ".custom" user-emacs-directory))
#+end_src

* Theme
#+BEGIN_SRC emacs-lisp :tangle init.el
  (use-package doom-themes
    :config
    (load-theme 'doom-dark+ t)
    (doom-themes-neotree-config))
#+end_src

* Basic Visual Adjustments
** Disable the scroll bar, menu bar, tool bar, tooltips, and the start screens.
#+BEGIN_SRC emacs-lisp :tangle init.el
  (scroll-bar-mode -1)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (tooltip-mode -1)
  (setq inhibit-splash-screen nil
    inhibit-startup-echo-area-message t
    inhibit-startup-message t)
#+END_SRC

** Prettify Things
This replaces some text with icons. Also ligatures.

#+BEGIN_SRC emacs-lisp :tangle init.el
  (defun org/prettify-set ()
    (interactive)
    (setq prettify-symbols-alist
        '(("#+begin_example" . "")
          ("#+BEGIN_EXAMPLE" . "")
          ("#+end_example" . "")
          ("#+END_EXAMPLE" . "")
          ("#+results:" . "")
          ("#+RESULTS:" . "")
          ("#+begin_quote" . "❝")
          ("#+BEGIN_QUOTE" . "❝")
          ("#+end_quote" . "❞")
          ("#+END_QUOTE" . "❞")
          ("[ ]" . "☐")
          ("[-]" . "◯")
          ("[X]" . "☑"))))
  (add-hook 'org-mode-hook 'org/prettify-set)

  (defun prog/prettify-set ()
    (interactive)
    (setq prettify-symbols-alist
        '(("lambda" . "λ")
          ("->" . "→")
          ("<-" . "←")
          ("<=" . "≤")
          (">=" . "≥")
          ("!=" . "≠")
          ("~=" . "≃")
          ("=~" . "≃"))))
  (add-hook 'prog-mode-hook 'prog/prettify-set)

  (global-prettify-symbols-mode)
#+end_src

** Line numbers
Display line numbers when programming.

#+BEGIN_SRC emacs-lisp :tangle init.el
  (global-display-line-numbers-mode)
  (setq display-line-numbers-type 'relative)
#+end_src

And sometimes line numbers can be distracting, so we disable them for certain modes.

#+BEGIN_SRC emacs-lisp :tangle init.el
  (dolist (mode '(org-mode-hook
    term-mode-hook
    eshell-mode-hook
    neotree-mode-hook
    elfeed-show-mode-hook
    circe-channel-mode-hook
    circe-chat-mode-hook
    doc-view-mode-hook
    xwidget-webkit-mode-hook
    woman-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+END_SRC

** Miscellaneous Minor Modes
These are some useful minor modes that I tend to use.

#+BEGIN_SRC emacs-lisp :tangle init.el
  (save-place-mode) ;; Save location
  (global-visual-line-mode) ;; Wrap lines
  (global-auto-revert-mode) ;; Revert buffers
#+END_SRC
* Fonts
Set font and fringe background color:

#+BEGIN_SRC emacs-lisp :tangle init.el
  (setq text-scale-mode-step 1.1)

  (set-face-attribute 'default nil :family "Iosevka Nerd Font" :weight 'regular :height 120)
  (set-face-attribute 'fixed-pitch nil :font "Iosevka Nerd Font" :weight 'regular :height 1.0)
  (set-face-attribute 'variable-pitch nil :font "Times New Roman" :height 120)
#+END_SRC

* Indentations
Configuring indentation.

#+BEGIN_SRC emacs-lisp :tangle init.el
  (setq-default indent-tabs-mode nil
      tab-width 2)
  (setq indent-line-function 'insert-tab)
#+END_SRC

* All The Icons
Fonts used by =doom-modeline=.

** Prerequisites
Install the fonts first by running:

#+BEGIN_SRC emacs-lisp :tangle no
  (all-the-icons-install-fonts)
#+end_src

** Package installation
Install the package using:

#+BEGIN_SRC emacs-lisp :tangle init.el
  (use-package all-the-icons)
#+end_src

* Evil Mode
Here we install and configure evil, since I /cannot/ use the default Emacs keys. Evil is the only way I've managed to move to Emacs. The Vim key bindings are a /lot/ better than the Emacs keybindings. Evil-collection is for miscellaneous minor modes, evil-org for org mode, and evil-leader adds a leader key.

** Base
This is the main evil package, that allows you to use vim keybindings.

#+BEGIN_SRC emacs-lisp :tangle init.el
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    :config
    (evil-mode 1))
#+END_SRC

** Collection
This package adds Vim keybindings for miscellaneous minor modes, such as dired and mu4e.

#+BEGIN_SRC emacs-lisp :tangle init.el
  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))
#+END_SRC

** Evil Org
For some reason evil-collection doesn't include org bindings, so we install another package.

#+BEGIN_SRC emacs-lisp :tangle init.el
  (use-package evil-org
    :diminish evil-org-mode
    :after org
    :config
    (add-hook 'org-mode-hook 'evil-org-mode)
    (add-hook 'evil-org-mode-hook
              (lambda () (evil-org-set-key-theme))))

  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys)
#+END_SRC

** Leader
This adds a leader key to Emacs, which is incredibly useful.

#+BEGIN_SRC emacs-lisp :tangle init.el
  (use-package evil-leader
    :config
    (global-evil-leader-mode)
    (evil-leader/set-leader "<SPC>")
    (evil-leader/set-key
      ;; General
      ".f" 'consult-isearch
      ".q" 'delete-frame
      ".e" 'eval-region
      ".s" 'straight-use-package
      ;; Configs
      "ce" (lambda () (interactive) (find-file "~/.emacs.d/README.org"))
      ;; Undo
      "uv" 'undo-tree-visualize
      "uu" 'undo-tree-undo
      "ur" 'undo-tree-redo
      "uc" 'consult-yank-pop
      ;; Words
      "wt" 'mw-thesaurus-lookup-dwim
      "wd" 'dictionary-lookup-definition
      "we" 'emoji-insert
      ;; Files
      "fr" 'consult-recent-file
      "fb" 'consult-bookmark
      "ff" 'find-file
      ;; Bufffers
      "bv" 'split-window-right
      "bh" 'split-window-below
      "bd" 'kill-current-buffer
      "bb" 'consult-buffer
      "bx" 'switch-to-scratch
      ;; Projectile
      "pa" 'projectile-add-known-project
      "pf" 'consult-projectile
      "pp" 'projectile-switch-project
      "pg" 'projectile-grep
      "pm" 'projectile-commander
      "pc" 'projectile-compile-project
      ;; Org Mode
      "oc" 'org-edit-special
      "ol" 'org-latex-preview
      "ot" 'org-ctrl-c-ctrl-c
      "oi" 'org-toggle-inline-images
      "oa" 'org-agenda
      "os" 'org-schedule
      ; Export
      "oep" 'org-latex-export-to-pdf
      "oeh" 'org-html-export-to-html
      "oem" 'org-man-export-to-man
      "oeu" 'org-publish-project
      ; Roam
      "orf" 'org-roam-node-find
      "ori" 'org-roam-node-insert
      "oru" 'org-roam-db-sync
      "oro" 'orui-open
      ; Babel
      "obs" 'org-babel-execute-src-block
      "obb" 'org-babel-execute-buffer
      "obl" 'org-babel-load-file
      ;; Help
      "hh" 'help
      "hk" 'describe-key
      "hv" 'describe-variable
      "hf" 'describe-function
      "hs" 'describe-symbol
      "hm" 'describe-mode
      ;; Magit
      "gi" 'magit-init
      "gc" 'magit-commit
      "gp" 'magit-push
      "gC" 'magit-clone
      "gs" 'magit-status))
#+END_SRC

** Additional keybindings
Here I bind some extra keybindings for evil mode.
    
#+BEGIN_SRC emacs-lisp :tangle init.el
  (define-key evil-normal-state-map (kbd "M-s") 'save-buffer)
  (define-key evil-normal-state-map (kbd "M-q") 'delete-window)
  (define-key evil-normal-state-map (kbd "M-w") 'kill-current-buffer)

  (define-key evil-normal-state-map (kbd "<C-tab>") 'consult-buffer)

  (define-key evil-normal-state-map (kbd "C-h") 'evil-window-left)
  (define-key evil-normal-state-map (kbd "C-j") 'evil-window-down)
  (define-key evil-normal-state-map (kbd "C-k") 'evil-window-up)
  (define-key evil-normal-state-map (kbd "C-l") 'evil-window-right)
  (define-key evil-normal-state-map (kbd "M-j") 'evil-scroll-down)
  (define-key evil-normal-state-map (kbd "M-k") 'evil-scroll-up)

  (define-key evil-normal-state-map "u" 'undo-tree-undo)
  (define-key evil-normal-state-map (kbd "C-r") 'undo-tree-redo)

  (define-key evil-normal-state-map (kbd "M-t") 'neotree-toggle)
  (define-key evil-normal-state-map (kbd "M-m") 'minimap-mode)
  (define-key evil-normal-state-map (kbd "<C-return>") 'shr-browse-url)
  (define-key key-translation-map (kbd "ESC") (kbd "C-g"))

  (define-key evil-normal-state-map (kbd "C-=") 'text-scale-increase)
  (define-key evil-normal-state-map (kbd "C--") 'text-scale-decrease)
  (define-key evil-normal-state-map (kbd "C-0") 'text-scale-adjust)

  (define-key evil-normal-state-map (kbd "<remap> <evil-next-line>") 'evil-next-visual-line)
  (define-key evil-normal-state-map (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line)
  (define-key evil-motion-state-map (kbd "<remap> <evil-next-line>") 'evil-next-visual-line)
  (define-key evil-motion-state-map (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line)

  (defun my/c-c ()
    (interactive)
    (setq unread-command-events (listify-key-sequence (kbd "C-c"))))

  (defun my/c-k ()
    (interactive)
    (setq unread-command-events (listify-key-sequence (kbd "C-k"))))

  (evil-define-key 'normal global-map (kbd ",c") 'my/c-c)
  (evil-define-key 'normal global-map (kbd ",x") 'my/c-k)
#+END_SRC

** Miscellaneous settings
*** Cursor shapes
Set the cursor shape for different evil states.
     
#+BEGIN_SRC emacs-lisp :tangle init.el
  (set-default 'evil-normal-state-cursor 'box)
  (set-default 'evil-insert-state-cursor 'bar)
  (set-default 'evil-visual-state-cursor 'hbar)
  (set-default 'evil-motion-state-cursor 'box)
  (set-default 'evil-replace-state-cursor 'box)
  (set-default 'evil-operator-state-cursor 'hbar)
  (set-cursor-color "#B37AAE")
  (setq-default cursor-type 'bar)
#+END_SRC

*** Small additions
We want /some/ Emacs in evil, so we change a few settings here.

#+BEGIN_SRC emacs-lisp :tangle init.el
  (setq evil-cross-lines t
        evil-move-beyond-eol t
        evil-symbol-word-search t
        evil-want-Y-yank-to-eol t
        evil-cross-lines t)
#+END_SRC
* Additional Packages
** Which Key
We install which-key in case we ever forget any keybinds.

#+BEGIN_SRC emacs-lisp :tangle init.el
  (use-package which-key
    :config (which-key-mode)
    (which-key-setup-side-window-bottom)
    (setq which-key-idle-delay 0.1))
#+END_SRC

** M-x completion
Vertico helps with better completion and to replace the default M-x. Consult adds a few things. Orderless adds fuzzy findings, marginalia adds stuff to your minibuffer.

#+BEGIN_SRC emacs-lisp :tangle init.el
  (use-package consult)

  (use-package vertico
    :ensure t
    :bind (:map vertico-map
           ("C-j" . vertico-next)
           ("C-k" . vertico-previous))
    :init
    (vertico-mode)
    :config
    (setq vertico-cycle t))

  (use-package orderless
    :init
    (setq completion-styles '(orderless)
          completion-category-defaults nil
          completion-category-overrides '((file (styles partial-completion)))))

  (use-package marginalia
    :after vertico
    :ensure t
    :custom
    (maarginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
    :init
    (marginalia-mode))
#+END_SRC

** Neotree
Neotree is a cool file tree, so we install it. Although I usually use dired, neotree can be useful if you need a tree layout.

#+BEGIN_SRC emacs-lisp :tangle init.el
  (use-package neotree)
  (setq neo-theme (if (display-graphic-p) 'icons 'arrow))
  (add-hook 'neotree-mode-hook
           (lambda ()
             (define-key evil-normal-state-local-map (kbd "SPC") 'neotree-quick-look)
             (define-key evil-normal-state-local-map (kbd "RET") 'neotree-enter)
             (define-key evil-normal-state-local-map (kbd "g") 'neotree-refresh)
             (define-key evil-normal-state-local-map (kbd "n") 'neotree-next-line)
             (define-key evil-normal-state-local-map (kbd "p") 'neotree-previous-line)
             (define-key evil-normal-state-local-map (kbd "A") 'neotree-stretch-toggle)
             (define-key evil-normal-state-local-map (kbd "H") 'neotree-hidden-file-toggle)))
  (setq neo-window-fixed-size nil)

  '(neo-dir-link-face ((t (:foreground "deep sky blue" :slant normal :weight bold :height 100 :family "Fira Code"))))
  '(neo-file-link-face ((t (:foreground "White" :weight normal :height 120 :family "Fira Code"))))
#+END_SRC

** Magit
Magit is the best git client, and it is a /must/. Less typing, less time spent using git, and more coding.

#+BEGIN_SRC emacs-lisp :tangle init.el
  (use-package magit
    :defer t)
#+END_SRC

** Parentheses
*** Smart parentheses
Most code editors automatically match parentheses, but Emacs doesn't do this, so we install a package.

#+BEGIN_SRC emacs-lisp :tangle init.el
  (use-package smartparens
    :config (smartparens-global-mode)
    (show-smartparens-mode))
#+END_SRC

*** Rainbow parentheses
Most editors also automatically color matching parentheses, but we need to install a package for this to happen.

#+BEGIN_SRC emacs-lisp :tangle init.el
  (use-package rainbow-delimiters
    :config
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+END_SRC

** Mode line
The default mode line is ugly, so this package replaces it with one that looks like the Doom mode line.

#+BEGIN_SRC emacs-lisp :tangle init.el
  (setq display-time-default-load-average nil)

  (line-number-mode)
  (column-number-mode)
  (display-time-mode -1)
  (size-indication-mode -1)

  (use-package doom-modeline
    :init (doom-modeline-mode)
    :config
    (setq doom-modeline-buffer-file-name-style 'file-name
          doom-modeline-height 30
          doom-modeline-enable-word-count t
          doom-modeline-buffer-encoding nil
          doom-modeline-icon t
          doom-modeline-modal-icon nil
          doom-modeline-major-mode-icon t
          doom-modeline-major-mode-color-icon t
          doom-modeline-bar-width 3))

  (custom-set-faces
   '(mode-line ((t (:family "Iosevka Nerd Font" :height 120)))))

  (use-package hide-mode-line
    :hook
    (special-mode . hide-mode-line-mode)
    (term-mode . hide-mode-line-mode)
    (neotree-mode . hide-mode-line-mode))
#+END_SRC

** Undo Tree
We want to visualize the undo history better, so we install the undo-tree package. Oh and we don't want to save the history.

#+BEGIN_SRC emacs-lisp :tangle init.el
  (use-package undo-tree
    :config
    (global-undo-tree-mode)
    (setq undo-tree-auto-save-history nil))
#+END_SRC

** Formatter
Let's install a formatter to format our horrible code.

#+BEGIN_SRC emacs-lisp :tangle init.el
  (use-package format-all
    :init (format-all-mode))
#+END_SRC

** LSP
I use Emacs for coding as well, so we're going to configure lsp-mode.

#+BEGIN_SRC emacs-lisp :tangle init.el
  (use-package lsp-mode
    :init
    :hook (prog-mode . lsp-mode)
           ; (lua-mode . lsp)
           ; (python-mode . lsp)
           ; (sh-mode . lsp)
           ; (lisp-mode . lsp)
           ; (css-mode . lsp)
           ; (html-mode . lsp)
           ; (json-mode . lsp)
           ; (markdown-mode . lsp)
           ; (latex-mode . lsp)
           ; (go-mode . lsp)
           ; (text-mode . lsp)
           ; (org-mode . lsp-mode))
    :commands lsp
    :config
    (setq lsp-enable-symbol-highlighting nil
        lsp-enable-which-key-integration t
        lsp-ui-doc-enable t
        lsp-lens-enable nil
        lsp-headerline-breadcrumb-enable nil
        lsp-ui-sideline-enable nil
        lsp-ui-sideline-enable t
        lsp-modeline-code-actions-enable t
        lsp-ui-sideline-enable t
        lsp-ui-doc-border nil
        lsp-eldoc-enable-hover t
        lsp-log-io nil
        lsp-enable-file-watchers nil))

  ; (use-package lsp-grammarly)

  (use-package lsp-ui :commands lsp-ui-mode)

  (use-package lsp-treemacs
    :after lsp)

  (setq lsp-enable-symbol-highlighting nil)
#+end_src

** Company
Company is used for completions.

#+BEGIN_SRC emacs-lisp :tangle init.el
  (use-package company
    :after lsp-mode
    :hook (lsp-mode . company-mode)
    :bind (:map company-active-map
                ("<tab>" . company-complete-selection))
          (:map lsp-mode-map
                ("<tab>" . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0))

  (use-package company-box
    :hook (company-mode . company-box-mode))
#+END_SRC

** Flycheck
Syntax checking for code.

#+BEGIN_SRC emacs-lisp :tangle init.el
  ; (use-package flycheck
  ;   :ensure t
  ;   :init (global-flycheck-mode))
#+END_SRC

** Projectile
Here, we install and configure projectile, which is a project interaction library.

#+BEGIN_SRC emacs-lisp :tangle init.el
  (use-package projectile
    :config (projectile-mode 1))
#+END_SRC

* Org Mode
** Org-download
Drag-and-drop images directly into Emacs!

#+BEGIN_SRC emacs-lisp :tangle init.el
  (use-package org-download)
#+end_src

** Org-indent
Indent the contents of an Org document.

#+BEGIN_SRC emacs-lisp :tangle init.el
  (add-hook 'org-mode-hook 'org-indent-mode)
#+end_src

** Pretty entities
Renders a handful of LaTeX expressions.

#+BEGIN_SRC emacs-lisp :tangle init.el
  ; (add-hook 'org-mode-hook 'org-toggle-pretty-entities)
#+end_src

** Org Bullets
Customize the face of the bullets.

#+BEGIN_SRC emacs-lisp :tangle init.el
  (use-package org-bullets
    :ensure t
    :init
    (setq org-bullets-bullet-list
          '("•"))
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+end_src

** Org Ellipses
Change the character for the ellipses.

#+BEGIN_SRC emacs-lisp :tangle init.el
  (setq org-ellipsis " ⤵ ")
#+end_src

** Org TOC
We like table of contents, right?

#+BEGIN_SRC emacs-lisp :tangle init.el
  (use-package toc-org)
#+end_src

** Keywords
Let's add our own custom keywords and highlight them.

#+BEGIN_SRC emacs-lisp :tangle init.el
  (setq org-todo-keywords
       '((sequence "TODO" "IN PROGRESS" "CANCELLED" "DONE")))

  (setq org-todo-keyword-faces
    '(("TODO"      . (:foreground "#FF8080" :weight bold))
      ("IN PROGRESS" . (:foreground "#80D1FF" :weight bold))
      ("CANCELLED"   . (:foreground "#FFFE80" :weight bold))
      ("DONE"      . (:foreground "#97D59B" :weight bold))))
#+END_SRC

* Functions
** Compilation
A keybind for compilation.

#+BEGIN_SRC emacs-lisp :tangle init.el
  (global-set-key (kbd "<f9>") 'compile)
#+END_SRC

